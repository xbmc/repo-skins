<?xml version="1.0" encoding="UTF-8"?>
<includes>

	<include name="AddonBrowser_Controls">
		<control type="radiobutton" id="5">
			<description>Enable auto update</description>
			<visible allowhiddenfocus="true">false</visible>
		</control>
		<control type="radiobutton" id="6">
			<description>Enable addon notifications</description>
			<visible allowhiddenfocus="true">false</visible>
		</control>
		<control type="radiobutton" id="7">
			<description>Enable language filter</description>
			<visible allowhiddenfocus="true">false</visible>
		</control>
		<control type="radiobutton" id="8">
			<description>Hide broken addons</description>
			<visible allowhiddenfocus="true">false</visible>
		</control>
		<control type="button" id="9">
			<description>Check for repo updates</description>
			<visible allowhiddenfocus="true">false</visible>
		</control>
	</include>

	<include name="MyMusicNav_Controls">
		<control type="edit" id="8">
			<description>Search for a string anywhere in the Kodi music database</description>
			<visible allowhiddenfocus="true">false</visible>
		</control>
		<control type="radiobutton" id="16">
			<description>Start party mode (randomly play songs from your entire music collection)</description>
			<visible allowhiddenfocus="true">false</visible>
		</control>
		<control type="edit" id="19">
			<description>Filter the media files to only show items that include the specified string in the name</description>
			<visible allowhiddenfocus="true">false</visible>
		</control>
		<control type="button" id="20">
			<description>Update library</description>
			<visible allowhiddenfocus="true">false</visible>
		</control>
	</include>

	<include name="MyPics_Controls">
		<control type="button" id="6">
			<description>Start a picture slideshow</description>
			<visible allowhiddenfocus="true">false</visible>
		</control>
		<control type="button" id="7">
			<description>Start a recursive picture slideshow</description>
			<visible allowhiddenfocus="true">false</visible>
		</control>
		<control type="radiobutton" id="9">
			<description>Randomize the picture slideshow</description>
			<visible allowhiddenfocus="true">false</visible>
		</control>
		<include content="Hidden_List">
			<param name="id" value="3100" />
			<param name="visible" value="true" />
			<param name="content" value="$INFO[ListItem.FolderPath]" />
		</include>
	</include>

	<include name="MyPlaylist_Controls">
		<control type="radiobutton" id="20">
			<description>Shuffle the playlist</description>
			<visible allowhiddenfocus="true">false</visible>
		</control>
		<control type="button" id="21">
			<description>Save the playlist</description>
			<visible allowhiddenfocus="true">false</visible>
		</control>
		<control type="button" id="22">
			<description>Clear the playlist</description>
			<visible allowhiddenfocus="true">false</visible>
		</control>
		<control type="button" id="23">
			<description>Play the playlist</description>
			<visible allowhiddenfocus="true">false</visible>
		</control>
		<control type="button" id="24">
			<description>Play next item in playlist</description>
			<visible allowhiddenfocus="true">false</visible>
		</control>
		<control type="button" id="25">
			<description>Play previous item in playlist</description>
			<visible allowhiddenfocus="true">false</visible>
		</control>
		<control type="button" id="26">
			<description>Put the playlist on repeat</description>
			<visible allowhiddenfocus="true">false</visible>
		</control>
	</include>

	<include name="MyVideoNav_Controls">
		<control type="edit" id="8">
			<description>Search for a string anywhere in the Kodi music database</description>
			<visible allowhiddenfocus="true">false</visible>
		</control>
		<control type="button" id="14">
			<description>Show only unwatched or all videos</description>
			<visible allowhiddenfocus="true">false</visible>
		</control>
		<control type="edit" id="19">
			<description>Filter the media files to only show items that include the specified string in the name</description>
			<visible allowhiddenfocus="true">false</visible>
		</control>
		<control type="button" id="20">
			<description>Update library</description>
			<visible allowhiddenfocus="true">false</visible>
		</control>
		<include content="Hidden_List" condition="!Skin.HasSetting(Secondary_List_Enabled)">
			<param name="visible" value="!Skin.HasSetting(Secondary_List_Enabled) + [ListItem.IsCollection | Container.Content(playlist)]" />
			<param name="sortby" value="year" />
			<param name="sortorder" value="ascending" />
		</include>
	</include>

	<include name="MyViews_Common_Controls">
		<control type="button" id="2">
			<description>Select viewtype</description>
			<visible allowhiddenfocus="true">false</visible>
		</control>
		<control type="button" id="3">
			<description>Select sort method</description>
			<visible allowhiddenfocus="true">false</visible>
		</control>
		<control type="togglebutton" id="4">
			<description>Select sortmode (ascending or descending)</description>
			<visible allowhiddenfocus="true">false</visible>
		</control>
		<include content="User_Scroll_Delay" />
		<!-- Set focus to view -->
		<control type="button" id="4012">
			<visible allowhiddenfocus="true">false</visible>
			<onfocus>ClearProperty(Scrollbars,home)</onfocus>
			<onfocus>SetFocus(50)</onfocus>
		</control>
		<!-- Set focus to scrollbars -->
		<control type="button" id="4013">
			<visible allowhiddenfocus="true">false</visible>
			<onfocus condition="!String.IsEmpty(Window(home).Property(Multiart_Fadeout))">ClearProperty(Multiart_Fadeout,home)</onfocus>
			<onfocus>SetProperty(Scrollbars,true,home)</onfocus>
			<onfocus>SetFocus(60)</onfocus>
		</control>
		<!-- Hidden Controls for animation trigger on menu switching and resetting multiart if enabled-->
		<control type="button" id="4014">
			<visible allowhiddenfocus="true">false</visible>
			<onfocus>SetProperty(Options_Switching,Active,Home)</onfocus>
			<onfocus>SetFocus(50)</onfocus>
			<onfocus>SetFocus(3000)</onfocus>
			<include content="Set_Multiart_OnFocus_Conditions" condition="Skin.HasSetting(Multiart_Slideshow) + [Window.Is(videos) | Window.Is(music)]" />
		</control>
		<control type="group" id="5005">
			<visible>Control.HasFocus(4014)</visible>
			<animation effect="slide" end="0,0" time="360" reversible="false">Hidden</animation>
		</control>
		<!-- Container Update Bounce Test For Info_Infoscreens_Label -->
		<control type="button" id="6001">
			<visible allowhiddenfocus="true">false</visible>
			<onfocus condition="Container.IsUpdating">SetFocus(6002)</onfocus>
			<onfocus condition="!Container.IsUpdating">SetFocus(50)</onfocus>
			<onfocus condition="!Container.IsUpdating">Action(Info)</onfocus>
		</control>
		<control type="button" id="6002">
			<visible allowhiddenfocus="true">false</visible>
			<onfocus condition="Container.IsUpdating">SetFocus(6001)</onfocus>
			<onfocus condition="!Container.IsUpdating">SetFocus(50)</onfocus>
			<onfocus condition="!Container.IsUpdating">Action(Info)</onfocus>
		</control>
		<control type="videowindow">
			<visible>String.IsEqual(Window(home).Property(Trailer_Autoplay),true)</visible>
		</control>
		<include content="Music_Player_Controls" condition="Skin.HasSetting(Music_Player_Enabled)" />
		<include content="Trailer_Autoplay_Mask" condition="Skin.HasSetting(Trailer_Autoplay) + Window.Is(videos)" />
		<include content="Light_Theme_Background">
			<param name="visible" value="$EXP[Background_IsLight] + !Window.IsVisible(1150)" />
			<include content="Trailer_Autoplay_Fade_Delayed_Animation" condition="Skin.HasSetting(Trailer_Autoplay) + Window.Is(videos)" />
		</include>
	</include>

	<include name="MyViews_Addons">
		<param name="visible" default="!$EXP[Infoscreen_IsVisible] + !Window.IsVisible(addonsettings)" />
		<definition>
			<include content="Background_Global" condition="!Skin.HasSetting(Background_Disabled)">
				<param name="visible" value="!Container.Content(addons) | Window.IsVisible(addonsettings)" />
			</include>
			<control type="group">
				<visible>$PARAM[visible]</visible>
				<include content="Visible_Fade_Delayed_Animation" />
				<include content="ListView_Display">
					<param name="art_icon" value="addonbrowser" />
				</include>
				<include content="ShowcaseView_Container" condition="$EXP[ShowcaseView_Enabled]" />
				<include content="ShowcaseView_Display" condition="$EXP[ShowcaseView_Enabled]">
					<param name="art_icon" value="addonbrowser" />
				</include>
				<include content="StripView_Container" condition="$EXP[StripView_Enabled]" />
				<include content="StripView_Display" condition="$EXP[StripView_Enabled]">
					<param name="art_icon" value="addonbrowser" />
				</include>
				<include content="Shared_Dialog_Layouts" condition="Skin.HasSetting(Music_Player_Enabled)" />
				<include content="GridView_Container" condition="$EXP[GridView_Enabled]">
					<param name="art_icon" value="addonbrowser" />
				</include>
			</control>
			<control type="group">
				<visible>$PARAM[visible]</visible>
				<include content="Visible_Fade_Delayed_Long_Animation" />
				<include content="ListView_Container" />
				<include content="ListView_Details" />
				<include content="ShowcaseView_Details" condition="$EXP[ShowcaseView_Enabled]" />
				<include content="StripView_Details" condition="$EXP[StripView_Enabled]" />
				<include content="GridView_Overlay_Details" condition="$EXP[GridView_Enabled]" />
			</control>
		</definition>
	</include>

	<include name="MyViews_Main">
		<param name="visible" default="!$EXP[Infoscreen_IsVisible]" />
		<definition>
			<control type="group">
				<visible>$PARAM[visible]</visible>
				<include content="Visible_Fade_Delayed_Animation" />
				<include content="Trailer_Autoplay_Fade_Animation" condition="Skin.HasSetting(Trailer_Autoplay)" />
				<include content="Secondary_List_Array" condition="Skin.HasSetting(Secondary_List_Enabled)" />
				<include content="Background_Media" condition="[Window.Is(videos) | Window.Is(music)] + !Skin.HasSetting(Background_Disabled)" />
				<include content="ListView_Display" />
				<include content="BillboardView_Container" condition="$EXP[BillboardView_Enabled]" />
				<include content="BillboardView_Display" condition="$EXP[BillboardView_Enabled]" />
				<include content="ShowcaseView_Container" condition="$EXP[ShowcaseView_Enabled]" />
				<include content="ShowcaseView_Display" condition="$EXP[ShowcaseView_Enabled]" />
				<include content="StripView_Container" condition="$EXP[StripView_Enabled]" />
				<include content="StripView_Display" condition="$EXP[StripView_Enabled]" />
				<include content="Shared_Dialog_Layouts" condition="Skin.HasSetting(Music_Player_Enabled)" />
				<include content="GridView_Container" condition="$EXP[GridView_Enabled]" />
			</control>
			<control type="group">
				<visible>$PARAM[visible]</visible>
				<include content="Visible_Fade_Delayed_Long_Animation" />
				<include content="Trailer_Autoplay_Fade_Animation" condition="Skin.HasSetting(Trailer_Autoplay)" />
				<include content="ListView_Container" />
				<include content="ListView_Details" />
				<include content="BillboardView_Details" condition="$EXP[BillboardView_Enabled]" />
				<include content="ShowcaseView_Details" condition="$EXP[ShowcaseView_Enabled]" />
				<include content="StripView_Details" condition="$EXP[StripView_Enabled]" />
				<include content="GridView_Overlay_Details" condition="$EXP[GridView_Enabled]" />
				<include content="MediaFlags" />
			</control>
		</definition>
	</include>

	<include name="MyViews_Pictures">
		<param name="visible" default="!$EXP[Infoscreen_IsVisible] + !Window.IsVisible(slideshow)" />
		<definition>
			<control type="group">
				<visible>$PARAM[visible]</visible>
				<include content="Visible_Fade_Delayed_Animation" />
				<include content="Background_Global" condition="!Skin.HasSetting(Background_Disabled)">
					<param name="visible" value="!Container.Content(images) + !Container.Content(addons)" />
				</include>
				<include content="ListView_Display">
					<param name="art_icon" value="pictures" />
				</include>
				<include content="ShowcaseView_Container" condition="$EXP[ShowcaseView_Enabled]" />
				<include content="ShowcaseView_Display" condition="$EXP[ShowcaseView_Enabled]">
					<param name="art_icon" value="pictures" />
				</include>
				<include content="StripView_Container" condition="$EXP[StripView_Enabled]" />
				<include content="StripView_Display" condition="$EXP[StripView_Enabled]">
					<param name="art_icon" value="addonbrowser" />
				</include>
				<include content="Shared_Dialog_Layouts" condition="Skin.HasSetting(Music_Player_Enabled)" />
				<include content="GridView_Container" condition="$EXP[GridView_Enabled]">
					<param name="art_icon" value="pictures" />
				</include>
			</control>
			<control type="group">
				<visible>$PARAM[visible]</visible>
				<include content="Visible_Fade_Delayed_Long_Animation" />
				<include content="ListView_Container" />
				<include content="ListView_Details" />
				<include content="ShowcaseView_Details" condition="$EXP[ShowcaseView_Enabled]" />
				<include content="StripView_Details" condition="$EXP[StripView_Enabled]" />
				<include content="GridView_Overlay_Details" condition="$EXP[GridView_Enabled]" />
			</control>
		</definition>
	</include>

	<include name="MyViews_Playlists">
		<param name="visible" default="!$EXP[Infoscreen_IsVisible]" />
		<param name="art_icon" default="Thumbnail" />
		<definition>
			<control type="group">
				<visible>$PARAM[visible]</visible>
				<include content="Visible_Fade_Delayed_Animation" />
				<include content="ListView_Display">
					<param name="art_icon" value="$PARAM[art_icon]" />
				</include>
				<include content="Shared_Dialog_Layouts" condition="Skin.HasSetting(Music_Player_Enabled)" />
			</control>
			<control type="group">
				<visible>$PARAM[visible]</visible>
				<include content="Visible_Fade_Delayed_Long_Animation" />
				<include content="ListView_Container" />
				<include content="ListView_Details" />
			</control>
		</definition>
	</include>

	<include name="MyViews_Programs">
		<param name="visible" default="!$EXP[Infoscreen_IsVisible]" />
		<definition>
			<control type="group">
				<visible>$PARAM[visible]</visible>
				<include content="Visible_Fade_Delayed_Animation" />
				<include content="ListView_Display" />
				<include content="BillboardView_Container" condition="$EXP[BillboardView_Enabled]" />
				<include content="BillboardView_Display" condition="$EXP[BillboardView_Enabled]" />
				<include content="ShowcaseView_Container" condition="$EXP[ShowcaseView_Enabled]" />
				<include content="ShowcaseView_Display" condition="$EXP[ShowcaseView_Enabled]" />
				<include content="StripView_Container" condition="$EXP[StripView_Enabled]" />
				<include content="StripView_Display" condition="$EXP[StripView_Enabled]" />
				<include content="Shared_Dialog_Layouts" condition="Skin.HasSetting(Music_Player_Enabled)" />
				<include content="GridView_Container" condition="$EXP[GridView_Enabled]" />
				<include content="MediaFlags" />
			</control>
			<control type="group">
				<visible>$PARAM[visible]</visible>
				<include content="Visible_Fade_Delayed_Long_Animation" />
				<include content="ListView_Container" />
				<include content="ListView_Details" />
				<include content="BillboardView_Details" condition="$EXP[BillboardView_Enabled]" />
				<include content="ShowcaseView_Details" condition="$EXP[ShowcaseView_Enabled]" />
				<include content="StripView_Details" condition="$EXP[StripView_Enabled]" />
				<include content="GridView_Overlay_Details" condition="$EXP[GridView_Enabled]" />
				<include content="MediaFlags" />
			</control>
		</definition>
	</include>

	<include name="OptionsMenu_Slides">
		<animation effect="slide" start="0" end="0,45" time="0" condition="Window.Is(music) + Integer.IsGreater(Container.ViewCount,1)">Conditional</animation>
		<animation effect="slide" start="0" end="0,30" time="0" condition="Integer.IsLessOrEqual(Container(3000).NumItems,12) + !Integer.IsGreater(Container.ViewCount,1)">Conditional</animation>
		<animation effect="slide" start="0" end="0,30" time="0" condition="Integer.IsLessOrEqual(Container(3000).NumItems,11) + !Integer.IsGreater(Container.ViewCount,1)">Conditional</animation>
		<animation effect="slide" start="0" end="0,30" time="0" condition="Integer.IsLessOrEqual(Container(3000).NumItems,10) + !Integer.IsGreater(Container.ViewCount,1)">Conditional</animation>
		<animation effect="slide" start="0" end="0,30" time="0" condition="Integer.IsLessOrEqual(Container(3000).NumItems,9) + !Integer.IsGreater(Container.ViewCount,1)">Conditional</animation>
		<animation effect="slide" start="0" end="0,30" time="0" condition="Integer.IsLessOrEqual(Container(3000).NumItems,8) + !Integer.IsGreater(Container.ViewCount,1)">Conditional</animation>
		<animation effect="slide" start="0" end="0,30" time="0" condition="Integer.IsLessOrEqual(Container(3000).NumItems,7) + !Integer.IsGreater(Container.ViewCount,1)">Conditional</animation>
		<animation effect="slide" start="0" end="0,30" time="0" condition="Integer.IsLessOrEqual(Container(3000).NumItems,6) + !Integer.IsGreater(Container.ViewCount,1)">Conditional</animation>
		<animation effect="slide" start="0" end="0,30" time="0" condition="Integer.IsLessOrEqual(Container(3000).NumItems,5) + !Integer.IsGreater(Container.ViewCount,1)">Conditional</animation>
		<animation effect="slide" start="0" end="0,30" time="0" condition="Integer.IsLessOrEqual(Container(3000).NumItems,4) + !Integer.IsGreater(Container.ViewCount,1)">Conditional</animation>
		<animation effect="slide" start="0" end="0,30" time="0" condition="Integer.IsLessOrEqual(Container(3000).NumItems,3) + !Integer.IsGreater(Container.ViewCount,1)">Conditional</animation>
		<animation effect="slide" start="0" end="0,30" time="0" condition="Integer.IsLessOrEqual(Container(3000).NumItems,2) + !Integer.IsGreater(Container.ViewCount,1)">Conditional</animation>
		<animation effect="slide" start="0" end="0,30" time="0" condition="Integer.IsLessOrEqual(Container(3000).NumItems,1) + !Integer.IsGreater(Container.ViewCount,1)">Conditional</animation>
	</include>

	<include name="MyViews_Menu_and_Scrollbars">
		<definition>
			<include content="Scrollbars" />
			<control type="fixedlist" id="3000">
				<viewtype label="535">list</viewtype>
				<visible allowhiddenfocus="true">String.IsEqual(Window(home).Property(OptionsMenu),Active) + !Window.IsVisible(shutdownmenu) + !Window.IsVisible(virtualkeyboard)</visible>
				<include content="VisibleHidden_Fade_Delayed_Animation" />
				<include content="OptionsMenu_Slides" />
				<description>Options menu</description>
				<left>120</left>
				<width>1080</width>
				<centertop>50%</centertop>
				<height>780</height>
				<onup>0</onup>
				<ondown>0</ondown>
				<onback>4012</onback>
				<onfocus>ClearProperty(Scrollbars,home)</onfocus>
				<onfocus>SetProperty(OptionsMenu,Active,home)</onfocus>
				<onunfocus>ClearProperty(OptionsMenu,home)</onunfocus>
				<onleft condition="String.IsEmpty(Container(3000).ListItem.Property(ActionLeft))">4012</onleft>
				<onright condition="String.IsEmpty(Container(3000).ListItem.Property(ActionRight))">4012</onright>
				<onleft condition="!String.IsEmpty(Container(3000).ListItem.Property(ActionLeft))">$INFO[Container(3000).ListItem.Property(ActionLeft)]</onleft>
				<onright condition="!String.IsEmpty(Container(3000).ListItem.Property(ActionRight))">$INFO[Container(3000).ListItem.Property(ActionRight)]</onright>
				<onleft condition="!String.IsEmpty(Container(3000).ListItem.Property(ActionLeft2))">$INFO[Container(3000).ListItem.Property(ActionLeft2)]</onleft>
				<onright condition="!String.IsEmpty(Container(3000).ListItem.Property(ActionRight2))">$INFO[Container(3000).ListItem.Property(ActionRight2)]</onright>
				<onleft condition="!String.IsEmpty(Container(3000).ListItem.Property(ActionLeft3))">$INFO[Container(3000).ListItem.Property(ActionLeft3)]</onleft>
				<onright condition="!String.IsEmpty(Container(3000).ListItem.Property(ActionRight3))">$INFO[Container(3000).ListItem.Property(ActionRight3)]</onright>
				<!-- Reset multiart on viewchange -->
				<onleft condition="Container(3000).HasFocus(1)">SetFocus(4014)</onleft>
				<onright condition="Container(3000).HasFocus(1)">SetFocus(4014)</onright>
				<!-- Transition on left or right -->
				<onleft condition="Container(3000).HasFocus(2)">SetFocus(4014)</onleft>
				<onright condition="Container(3000).HasFocus(2)">SetFocus(4014)</onright>
				<!-- Transition on left only -->
				<onleft condition="Container(3000).HasFocus(3)">SetFocus(4014)</onleft>
				<!-- Transition on right only -->
				<onright condition="Container(3000).HasFocus(4)">SetFocus(4014)</onright>
				<!-- Showcase: Turn off Logos & transition on left only -->
				<onleft condition="Container(3000).HasFocus(5) + Container.Content(movies)">Skin.SetString(ShowcaseView_Logo_Movies,Off)</onleft>
				<onleft condition="Container(3000).HasFocus(5) + Container.Content(sets)">Skin.SetString(ShowcaseView_Logo_Sets,Off)</onleft>
				<onleft condition="Container(3000).HasFocus(5) + Container.Content(tvshows)">Skin.SetString(ShowcaseView_Logo_TVShows,Off)</onleft>
				<onleft condition="Container(3000).HasFocus(5) + Container.Content(artists)">Skin.SetString(ShowcaseView_Logo_Artists,Off)</onleft>
				<onleft condition="Container(3000).HasFocus(5)">SetFocus(4014)</onleft>
				<!-- Showcase: Turn off Logos & transition on right only -->
				<onright condition="Container(3000).HasFocus(6) + Container.Content(movies)">Skin.SetString(ShowcaseView_Logo_Movies,Off)</onright>
				<onright condition="Container(3000).HasFocus(6) + Container.Content(sets)">Skin.SetString(ShowcaseView_Logo_Sets,Off)</onright>
				<onright condition="Container(3000).HasFocus(6) + Container.Content(tvshows)">Skin.SetString(ShowcaseView_Logo_TVShows,Off)</onright>
				<onright condition="Container(3000).HasFocus(6) + Container.Content(artists)">Skin.SetString(ShowcaseView_Logo_Artists,Off)</onright>
				<onright condition="Container(3000).HasFocus(6)">SetFocus(4014)</onright>
				<!-- Strip: Turn off Logos & transition on right only -->
				<onright condition="Container(3000).HasFocus(7) + Container.Content(movies)">Skin.SetString(StripView_Logo_Movies,Off)</onright>
				<onright condition="Container(3000).HasFocus(7) + Container.Content(sets)">Skin.SetString(StripView_Logo_Sets,Off)</onright>
				<onright condition="Container(3000).HasFocus(7) + Container.Content(tvshows)">Skin.SetString(StripView_Logo_TVShows,Off)</onright>
				<onright condition="Container(3000).HasFocus(7) + Container.Content(artists)">Skin.SetString(StripView_Logo_Artists,Off)</onright>
				<onright condition="Container(3000).HasFocus(7)">SetFocus(4014)</onright>
				<!-- Strip: Turn off Logos & transition on left only -->
				<onleft condition="Container(3000).HasFocus(8) + Container.Content(movies)">Skin.SetString(StripView_Logo_Movies,Off)</onleft>
				<onleft condition="Container(3000).HasFocus(8) + Container.Content(sets)">Skin.SetString(StripView_Logo_Sets,Off)</onleft>
				<onleft condition="Container(3000).HasFocus(8) + Container.Content(tvshows)">Skin.SetString(StripView_Logo_TVShows,Off)</onleft>
				<onright condition="Container(3000).HasFocus(8) + Container.Content(artists)">Skin.SetString(StripView_Logo_Artists,Off)</onright>
				<onleft condition="Container(3000).HasFocus(8)">SetFocus(4014)</onleft>
				<!-- Strip: Turn off Logos on left only -->
				<onleft condition="Container(3000).HasFocus(9) + Container.Content(movies)">Skin.SetString(StripView_Logo_Movies,Off)</onleft>
				<onleft condition="Container(3000).HasFocus(9) + Container.Content(sets)">Skin.SetString(StripView_Logo_Sets,Off)</onleft>
				<onleft condition="Container(3000).HasFocus(9) + Container.Content(tvshows)">Skin.SetString(StripView_Logo_TVShows,Off)</onleft>
				<onleft condition="Container(3000).HasFocus(9) + Container.Content(artists)">Skin.SetString(StripView_Logo_Artists,Off)</onleft>
				<!-- Strip: Turn off Logos on right only -->
				<onright condition="Container(3000).HasFocus(10) + Container.Content(movies)">Skin.SetString(StripView_Logo_Movies,Off)</onright>
				<onright condition="Container(3000).HasFocus(10) + Container.Content(sets)">Skin.SetString(StripView_Logo_Sets,Off)</onright>
				<onright condition="Container(3000).HasFocus(10) + Container.Content(tvshows)">Skin.SetString(StripView_Logo_TVShows,Off)</onright>
				<onright condition="Container(3000).HasFocus(10) + Container.Content(artists)">Skin.SetString(StripView_Logo_Artists,Off)</onright>
				<!--Grid: Transition from keyart to poster -->
				<onleft condition="Container(3000).HasFocus(11)">SetFocus(505)</onleft>
				<onleft condition="Container(3000).HasFocus(11)">SetFocus(4014)</onleft>
				<onright condition="Container(3000).HasFocus(12)">SetFocus(505)</onright>
				<onright condition="Container(3000).HasFocus(12)">SetFocus(4014)</onright>
				<orientation>vertical</orientation>
				<focusposition>0</focusposition>
				<movement>12</movement>
				<defaultcontrol>1</defaultcontrol>
				<scrolltime tween="sine" easing="inout">380</scrolltime>
				<itemlayout height="60" width="1080">
					<include content="Simple_List_Layout">
						<param name="label" value="$INFO[ListItem.Label2]" />
						<param name="label_left" value="0" />
						<param name="label_maxwidth" value="1080" />
					</include>
				</itemlayout>
				<focusedlayout height="60" width="1080">
					<include content="Simple_List_Layout">
						<param name="font" value="Main_Menu_Focused" />
						<param name="label" value="$INFO[ListItem.Label]" />
						<param name="label_left" value="0" />
						<param name="label_maxwidth" value="1080" />
					</include>
				</focusedlayout>
				<content>
					<include content="ListView_Menu_Options" />
					<include content="BillboardView_Menu_Options" condition="$EXP[BillboardView_Enabled]" />
					<include content="ShowcaseView_Menu_Options" condition="$EXP[ShowcaseView_Enabled]" />
					<include content="StripView_Menu_Options" condition="$EXP[StripView_Enabled]" />
					<include content="GridView_Menu_Options" condition="$EXP[GridView_Enabled]" />
					<include content="Trailer_Autoplay_Menu_Options" condition="Window.Is(videos) + Skin.HasSetting(Trailer_Autoplay)" />
					<include content="Common_Menu_Options" />
					<include content="Video_Menu_Options" condition="Window.Is(videos)" />
					<include content="MusicVideo_Menu_Options" condition="Window.Is(videos) | Window.Is(music)" />
					<include content="AddonBrowser_Menu_Options" condition="Window.Is(addonbrowser)" />
					<include content="Pictures_Menu_Options" condition="Window.Is(pictures)" />
					<include content="Playlist_Menu_Options" condition="Window.Is(musicplaylist) | Window.Is(videoplaylist)" />
				</content>
			</control>
		</definition>
	</include>
</includes>