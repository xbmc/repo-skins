<?xml version="1.0" encoding="utf-8"?>
<includes>
	<!-- String.IsEmpty(Window(10025).Property(PlayingBackgroundMedia)) -->
	<!-- Checks if service.tvtunes is running to hide now playing info -->
	<include name="TopBarNowPlayingProgress">
		<param name="visible">false</param>
		<param name="top">0</param>
		<param name="width">1920</param>
		<param name="height">41</param>
		<param name="flipy">false</param>
		<param name="info">Player.Progress</param>
		<param name="texturebg">colors/none.png</param>
		<param name="midtexture">colors/white20.png</param>
		<definition>
			<control type="progress">
				<visible>String.IsEmpty(Window(10025).Property(PlayingBackgroundMedia)) + [$PARAM[visible]]</visible>
				<top>$PARAM[top]</top>
				<width>$PARAM[width]</width>
				<height>$PARAM[height]</height>
				<info>$PARAM[info]</info>
				<texturebg>$PARAM[texturebg]</texturebg>
				<lefttexture/>
				<midtexture flipy="$PARAM[flipy]" colordiffuse="$VAR[PanelHighlightColorVar]">$PARAM[midtexture]</midtexture>
				<righttexture/>
				<overlaytexture/>
			</control>
		</definition>
	</include>
	<include name="TopBar">
		<param name="visible">true</param>
		<param name="id"/>
		<param name="icon"/>
		<param name="label"/>
		<param name="animationopen">true</param>
		<param name="animationclose">true</param>
		<definition>
			<control type="group">
				<visible>!Skin.HasSetting(DisableTopbar) + $PARAM[visible]</visible>
				<include content="AnimationSlideTopWindow">
					<param name="slide">90</param>
					<param name="opencondition">$PARAM[animationopen]</param>
					<param name="closecondition">$PARAM[animationclose]</param>
				</include>
				<include content="AnimationSlideTopVisible">
					<param name="slide">90</param>
				</include>
				<control type="image">
					<visible>String.IsEmpty(Skin.String(TopbarTexture.texture))</visible>
					<description>background image</description>
					<width>1920</width>
					<height>88</height>
					<texture border="1" colordiffuse="$VAR[TopbarTextureColorVar]">panels/mainmenu/wide-bar.png</texture>
				</control>
				<control type="image">
					<visible>Skin.String(TopbarTexture.texture,shadow)</visible>
					<description>background image</description>
					<width>1920</width>
					<height>88</height>
					<texture border="1" colordiffuse="$VAR[TopbarShadowTextureColorVar]">panels/mainmenu/shadow-bar.png</texture>
				</control>
				<include content="TopBarNowPlayingProgress">
					<param name="visible">Player.HasMedia + ![Skin.HasSetting(DisableTopbarNowPlayingProgress) | Skin.String(TopbarTexture.texture,shadow)]</param>
					<param name="info">Player.ProgressCache</param>
				</include>
				<include content="TopBarNowPlayingProgress">
					<param name="visible">Player.HasMedia + ![VideoPlayer.HasEpg | Skin.HasSetting(DisableTopbarNowPlayingProgress) | Skin.String(TopbarTexture.texture,shadow)]</param>
				</include>
				<include content="TopBarNowPlayingProgress">
					<param name="visible">VideoPlayer.HasEpg + ![Skin.HasSetting(DisableTopbarNowPlayingProgress) | Skin.String(TopbarTexture.texture,shadow)]</param>
					<param name="info">PVR.EpgEventProgress</param>
				</include>
				<include content="TopBarNowPlayingProgress">
					<param name="visible">Player.HasMedia + !Skin.HasSetting(DisableTopbarNowPlayingProgress) + Skin.String(TopbarTexture.texture,shadow)</param>
					<param name="info">Player.ProgressCache</param>
					<param name="height">87</param>
					<param name="texturebg">panels/mainmenu/shadow-bar-empty.png</param>
					<param name="midtexture">panels/mainmenu/shadow-bar20.png</param>
				</include>
				<include content="TopBarNowPlayingProgress">
					<param name="visible">Player.HasMedia + Skin.String(TopbarTexture.texture,shadow) + ![VideoPlayer.HasEpg | Skin.HasSetting(DisableTopbarNowPlayingProgress)]</param>
					<param name="height">87</param>
					<param name="texturebg">panels/mainmenu/shadow-bar-empty.png</param>
					<param name="midtexture">panels/mainmenu/shadow-bar20.png</param>
				</include>
				<include content="TopBarNowPlayingProgress">
					<param name="visible">VideoPlayer.HasEpg + Skin.String(TopbarTexture.texture,shadow) + !Skin.HasSetting(DisableTopbarNowPlayingProgress)</param>
					<param name="height">87</param>
					<param name="info">PVR.EpgEventProgress</param>
					<param name="texturebg">panels/mainmenu/shadow-bar-empty.png</param>
					<param name="midtexture">panels/mainmenu/shadow-bar20.png</param>
				</include>
				<control type="button">
					<top>0</top>
					<width>200</width>
					<height>40</height>
					<label/>
					<onclick>Action(Back)</onclick>
					<texturefocus/>
					<texturenofocus/>
				</control>
				<include condition="!Skin.HasSetting(DisableTopbarItemCount)" content="BreadCrumbs">
					<param name="width">760</param>
					<param name="label">$PARAM[label]</param>
					<param name="icon">$PARAM[icon]</param>
				</include>
				<include condition="Skin.HasSetting(DisableTopbarItemCount)" content="BreadCrumbs">
					<param name="width">1280</param>
					<param name="label">$PARAM[label]</param>
					<param name="icon">$PARAM[icon]</param>
				</include>
				<include condition="!Skin.HasSetting(DisableTopbarItemCount)" content="TopBarNowPlaying">
					<param name="width">760</param>
				</include>
				<include condition="Skin.HasSetting(DisableTopbarItemCount)" content="TopBarNowPlaying">
					<param name="width">1280</param>
				</include>
				<control type="grouplist">
					<description>right info top bar</description>
					<right>5</right>
					<width>760</width>
					<orientation>horizontal</orientation>
					<align>right</align>
					<usecontrolcoords>true</usecontrolcoords>
					<itemgap>0</itemgap>
					<control type="multiimage">
						<left>20</left>
						<width>40</width>
						<height>40</height>
						<imagepath>$INFO[Skin.String(WeatherIcons.path)]$INFO[Weather.FanartCode]$INFO[Skin.String(WeatherIcons.ext)]</imagepath>
						<include>WeatherIconAnimation</include>
						<visible>!Skin.HasSetting(DisableTopbarWeather) + !String.IsEmpty(Window(Weather).Property(Current.Temperature))</visible>
					</control>
					<control type="label">
						<label>$INFO[Window(weather).Property(Current.Temperature), ]$INFO[System.TemperatureUnits]</label>
						<include>BreadcrumbsLabel</include>
						<visible>!Skin.HasSetting(DisableTopbarWeather) + !String.IsEmpty(Window(Weather).Property(Current.Temperature))</visible>
					</control>
					<control type="label">
						<textcolor>$VAR[PanelSubTextColorVar]</textcolor>
						<label>$INFO[System.Date,  ]</label>
						<include>BreadcrumbsLabel</include>
						<visible>!Skin.HasSetting(DisableTopbarDate)</visible>
					</control>
					<control type="label">
						<textcolor>$VAR[PanelHighlightColorVar]</textcolor>
						<label>$INFO[System.Time,  ]</label>
						<include>BreadcrumbsLabel</include>
						<visible>!Skin.HasSetting(DisableTopbarTime)</visible>
					</control>
				</control>
				<control type="grouplist">
					<description>item and page count top bar</description>
					<visible>!Skin.HasSetting(DisableTopbarItemCount) + Integer.IsGreater(Container($PARAM[id]).NumPages,0)</visible>
					<include>AnimationVisibleFade</include>
					<centerleft>50%</centerleft>
					<width>370</width>
					<orientation>horizontal</orientation>
					<align>center</align>
					<usecontrolcoords>true</usecontrolcoords>
					<itemgap>0</itemgap>
					<include content="BreadcrumbsIcon">
						<param name="icon">list.png</param>
					</include>
					<control type="label">
						<label>$INFO[Container($PARAM[id]).NumItems, , $LOCALIZE[31001]]</label>
						<include>BreadcrumbsLabel</include>
					</control>
					<control type="label">
						<width>10</width>
					</control>
					<include content="BreadcrumbsIcon">
						<param name="icon">pages.png</param>
					</include>
					<control type="label">
						<label>$INFO[Container($PARAM[id]).CurrentPage, ]$INFO[Container($PARAM[id]).NumPages,/]</label>
						<include>BreadcrumbsLabel</include>
					</control>
				</control>
			</control>
			<control type="group" id="6111">
				<description>scroll label</description>
				<visible>!Skin.HasSetting(DisableScrollLetter)</visible>
				<visible>Container.Scrolling + [String.IsEqual(Container.SortMethod,$LOCALIZE[551]) | String.IsEqual(Container.SortMethod,$LOCALIZE[561]) | String.IsEqual(Container.SortMethod,$LOCALIZE[558]) | String.IsEqual(Container.SortMethod,$LOCALIZE[557]) | String.IsEqual(Container.SortMethod,$LOCALIZE[556])]</visible>
				<animation effect="fade" end="100" time="200">Visible</animation>
				<animation effect="fade" start="100" end="0" delay="1000" time="200">Hidden</animation>
				<right>5</right>
				<top>47</top>
				<width>134</width>
				<height>134</height>
				<control type="image">
					<texture colordiffuse="$VAR[PanelShadowColorVar]" border="20">$VAR[DialogShadowVolumeVar]</texture>
				</control>
				<control type="image">
					<texture colordiffuse="$VAR[PanelStyleColorVar]" border="20">$VAR[DialogStyleVolumeVar]</texture>
				</control>
				<control type="image">
					<top>10</top>
					<left>10</left>
					<right>10</right>
					<bottom>10</bottom>
					<aspectratio scalediffuse="false">center</aspectratio>
					<texture diffuse="diffuse/rounded10-104x104.png" colordiffuse="$VAR[PanelTextureColorVar]">$INFO[Skin.String(PanelTexture.texture)]</texture>
					<visible>!Skin.HasSetting(DialogSquare.texture)</visible>
				</control>
				<control type="image">
					<top>10</top>
					<left>10</left>
					<right>10</right>
					<bottom>10</bottom>
					<aspectratio scalediffuse="false">center</aspectratio>
					<texture colordiffuse="$VAR[PanelTextureColorVar]">$INFO[Skin.String(PanelTexture.texture)]</texture>
					<visible>Skin.HasSetting(DialogSquare.texture)</visible>
				</control>
				<control type="image">
					<texture colordiffuse="$VAR[PanelEmbossColorVar]" border="40">$VAR[DialogEmbossVolumeVar]</texture>
				</control>
				<control type="label">
					<top>10</top>
					<left>12</left>
					<width>110</width>
					<height>110</height>
					<align>center</align>
					<font>Font80_Bold_Caps</font>
					<label>$INFO[ListItem.SortLetter]</label>
					<textcolor>$VAR[PanelHighlightColorVar]</textcolor>
				</control>
			</control>
		</definition>
	</include>
	<include name="BreadCrumbs">
		<param name="width">760</param>
		<param name="label"/>
		<param name="icon"/>
		<definition>
			<control type="grouplist">
				<description>Breadcrumbs top bar</description>
				<visible>!Player.HasMedia | [Player.HasMedia + Skin.HasSetting(DisableTopbarNowPlaying) | !String.IsEmpty(Window(10025).Property(PlayingBackgroundMedia))]</visible>
				<include>AnimationVisibleFade</include>
				<left>5</left>
				<width>$PARAM[width]</width>
				<height>40</height>
				<orientation>horizontal</orientation>
				<usecontrolcoords>true</usecontrolcoords>
				<include content="BreadcrumbsIcon">
					<param name="icon">$PARAM[icon]</param>
				</include>
				<control type="label">
					<width>10</width>
					<label/>
				</control>
				<control type="label">
					<label>$PARAM[label]</label>
					<include>BreadcrumbsLabel</include>
				</control>
				<control type="label">
					<label>$INFO[Container.ShowTitle, / ]</label>
					<include>BreadcrumbsLabel</include>
					<visible>!String.IsEmpty(Container.ShowTitle) + !String.IsEqual(Container.ShowTitle,Container.FolderName)</visible>
				</control>
				<control type="label">
					<label>$INFO[Container.FolderName, / ]</label>
					<include>BreadcrumbsLabel</include>
					<visible>![Container.Content() + Window.IsActive(videos)]</visible>
					<visible>![Window.IsActive(MyPVRChannels.xml) | Window.IsActive(MyPVRTimers.xml) | Window.IsActive(MyPVRRecordings.xml) | Window.IsActive(MyPVRSearch.xml)]</visible>
				</control>
				<control type="label">
					<label>$INFO[Container.PluginCategory, / ]</label>
					<include>BreadcrumbsLabel</include>
					<visible>!String.IsEmpty(Container.PluginCategory)</visible>
				</control>
				<control type="label">
					<label> - $LOCALIZE[16101]</label>
					<include>BreadcrumbsLabel</include>
					<visible>String.StartsWith(Control.GetLabel(10),$LOCALIZE[16101]) + Window.IsActive(videos)</visible>
				</control>
				<control type="label">
					<label> - $LOCALIZE[16102]</label>
					<include>BreadcrumbsLabel</include>
					<visible>String.StartsWith(Control.GetLabel(10),$LOCALIZE[16102]) + Window.IsActive(videos)</visible>
				</control>
				<control type="label">
					<label> ($LOCALIZE[31360])</label>
					<include>BreadcrumbsLabel</include>
					<visible>Container.Filtered</visible>
				</control>
			</control>
		</definition>
	</include>
	<include name="TopBarNowPlaying">
		<param name="width">760</param>
		<definition>
			<control type="grouplist">
				<description>now playing topbar</description>
				<visible>Player.HasMedia + !Skin.HasSetting(DisableTopbarNowPlaying) + String.IsEmpty(Window(10025).Property(PlayingBackgroundMedia))</visible>
				<include>AnimationVisibleFade</include>
				<left>5</left>
				<width>$PARAM[width]</width>
				<height>40</height>
				<orientation>horizontal</orientation>
				<usecontrolcoords>true</usecontrolcoords>
				<itemgap>10</itemgap>
				<include content="BreadcrumbsIcon">
					<param name="icon">$VAR[NowPlayingInfoBarStatusVar]</param>
				</include>
				<control type="label">
					<label>$INFO[Player.Time]</label>
					<textcolor>$VAR[PanelSubTextColorVar]</textcolor>
					<include>BreadcrumbsLabel</include>
				</control>
				<control type="fadelabel">
					<label>$INFO[Player.Title]</label>
					<label>$INFO[MusicPlayer.Artist]</label>
					<include>BreadcrumbsLabel</include>
					<visible>Player.HasAudio + !String.IsEmpty(Musicplayer.Artist)</visible>
				</control>
				<control type="label">
					<label>$INFO[Player.Title]</label>
					<scroll>true</scroll>
					<include>BreadcrumbsLabel</include>
					<visible>Player.HasAudio + String.IsEmpty(Musicplayer.Artist)</visible>
				</control>
				<control type="fadelabel">
					<label>$INFO[Videoplayer.Season,S]$INFO[Videoplayer.Episode,E, ]$INFO[Videoplayer.Title]</label>
					<label>$INFO[Videoplayer.TVShowTitle]</label>
					<include>BreadcrumbsLabel</include>
					<visible>Player.HasVideo + !String.IsEmpty(Videoplayer.TVShowTitle)</visible>
				</control>
				<control type="fadelabel">
					<label>$INFO[Videoplayer.ChannelName]</label>
					<label>$INFO[Videoplayer.Title]</label>
					<include>BreadcrumbsLabel</include>
					<visible>Player.HasVideo + !String.IsEmpty(VideoPlayer.ChannelName)</visible>
				</control>
				<control type="fadelabel">
					<label>$INFO[Videoplayer.Title]</label>
					<label>$INFO[VideoPlayer.Artist]</label>
					<include>BreadcrumbsLabel</include>
					<visible>Player.HasVideo + !String.IsEmpty(Videoplayer.Artist)</visible>
				</control>
				<control type="label">
					<label>$INFO[Videoplayer.Title]</label>
					<include>BreadcrumbsLabel</include>
					<visible>Player.HasVideo + String.IsEmpty(Videoplayer.TVShowTitle) + String.IsEmpty(VideoPlayer.ChannelName) + String.IsEmpty(Videoplayer.Artist)</visible>
				</control>
			</control>
		</definition>
	</include>
	<include name="BreadcrumbsLabel">
		<font>Font30_Reg</font>
		<height>38</height>
		<width min="1" max="590">auto</width>
		<textcolor>$VAR[PanelTextColorVar]</textcolor>
	</include>
	<include name="BreadcrumbsIcon">
		<param name="icon">$PARAM[icon]</param>
		<definition>
			<control type="image">
				<visible>!Skin.HasSetting(IconsColored)</visible>
				<top>2</top>
				<width>36</width>
				<height>36</height>
				<texture colordiffuse="$VAR[PanelTextColorVar]">icons/default/$PARAM[icon]</texture>
			</control>
			<control type="image">
				<visible>Skin.HasSetting(IconsColored)</visible>
				<top>2</top>
				<width>36</width>
				<height>36</height>
				<texture>icons/colored/$PARAM[icon]</texture>
			</control>
		</definition>
	</include>
	<!-- Variables -->
	<variable name="BreadcrumbsVideoVar">
		<value condition="Container.Content(movies) | String.StartsWith(container.folderpath,library://video/movies/) | String.StartsWith(container.folderpath,videodb://movies)">$LOCALIZE[20342]</value>
		<value condition="Container.Content(musicvideos) | String.StartsWith(container.folderpath,library://video/musicvideos/) | String.StartsWith(container.folderpath,videodb://musicvideos)">$LOCALIZE[20389]</value>
		<value condition="Container.Content(tvshows) | String.StartsWith(container.folderpath,library://video/tvshows/) | String.StartsWith(container.folderpath,videodb://tvshows)">$LOCALIZE[20343]</value>
		<value condition="Container.Content(seasons)">$LOCALIZE[20343]</value>
		<value condition="Container.Content(episodes)">$LOCALIZE[20343]</value>
		<value>$LOCALIZE[3]</value>
	</variable>
	<variable name="BreadcrumbsVideoIconVar">
		<value condition="Container.Content(movies) | String.StartsWith(container.folderpath,library://video/movies/) | String.StartsWith(container.folderpath,videodb://movies)">movies.png</value>
		<value condition="Container.Content(musicvideos) | String.StartsWith(container.folderpath,library://video/musicvideos/) | String.StartsWith(container.folderpath,videodb://musicvideos)">musicvideos.png</value>
		<value condition="Container.Content(tvshows) | Container.Content(seasons) | Container.Content(episodes) | String.StartsWith(container.folderpath,library://video/tvshows/) | String.StartsWith(container.folderpath,videodb://tvshows)">tvshows.png</value>
		<value>videos.png</value>
	</variable>
	<variable name="BreadcrumbsPVRChannelsVar">
		<value condition="Window.IsActive(TVChannels)">$LOCALIZE[31173] / $LOCALIZE[19019] / $INFO[Control.GetLabel(29)]</value>
		<value>$LOCALIZE[19021] / $LOCALIZE[19019] / $INFO[Control.GetLabel(29)]</value>
	</variable>
	<variable name="BreadcrumbsPVRGuideVar">
		<value condition="Window.IsActive(TVGuide)">$LOCALIZE[31173] / $INFO[Control.GetLabel(29)] - $INFO[Control.GetLabel(30)]</value>
		<value>$LOCALIZE[19021] / $INFO[Control.GetLabel(29)] - $INFO[Control.GetLabel(30)]</value>
	</variable>
	<variable name="BreadcrumbsPVRRecordingsVar">
		<value condition="Window.IsActive(TVRecordings)">$LOCALIZE[31173] / $LOCALIZE[19017]$INFO[Control.GetLabel(30), / ]</value>
		<value>$LOCALIZE[19021] / $LOCALIZE[19017]$INFO[Control.GetLabel(30), / ]</value>
	</variable>
	<variable name="BreadcrumbsPVRTimersVar">
		<value condition="Window.IsActive(TVTimers)">$LOCALIZE[31173] / $LOCALIZE[19040]</value>
		<value condition="Window.IsActive(RadioTimers)">$LOCALIZE[19021] / $LOCALIZE[19040]</value>
		<value condition="Window.IsActive(TVTimerRules)">$LOCALIZE[19020] / $LOCALIZE[19138]$INFO[Control.GetLabel(29), / ]</value>
		<value>$LOCALIZE[19021] / $LOCALIZE[19138]$INFO[Control.GetLabel(29), / ]</value>
	</variable>
	<variable name="BreadcrumbsPVRSearchVar">
		<value condition="Window.IsActive(TVSearch)">$LOCALIZE[31173] / $LOCALIZE[137]</value>
		<value>$LOCALIZE[19021] / $LOCALIZE[137]</value>
	</variable>
	<variable name="NowPlayingInfoBarStatusVar">
		<value condition="Player.Playing">play.png</value>
		<value condition="Player.Paused">pause.png</value>
		<value condition="Player.Forwarding">forward.png</value>
		<value condition="Player.Rewinding">rewind.png</value>
	</variable>
</includes>